[{"C:\\Projects\\PosterInfo\\tg-web-app\\src\\index.js":"1","C:\\Projects\\PosterInfo\\tg-web-app\\src\\App.js":"2","C:\\Projects\\PosterInfo\\tg-web-app\\src\\reportWebVitals.js":"3","C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\geoApi.js":"4","C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\currencyApi.js":"5","C:\\Projects\\PosterInfo\\tg-web-app\\src\\Components\\FileUploaderMultiple.js":"6","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\base64toFile.js":"7","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\addposter.js":"8","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\validators.js":"9","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\getRandomId.js":"10"},{"size":516,"mtime":1688834612396,"results":"11","hashOfConfig":"12"},{"size":21590,"mtime":1692304415364,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1688485689182,"results":"14","hashOfConfig":"12"},{"size":1132,"mtime":1688485689181,"results":"15","hashOfConfig":"12"},{"size":476,"mtime":1688485689180,"results":"16","hashOfConfig":"12"},{"size":3233,"mtime":1692545456413,"results":"17","hashOfConfig":"12"},{"size":363,"mtime":1688485689183,"results":"18","hashOfConfig":"12"},{"size":5188,"mtime":1689368049786,"results":"19","hashOfConfig":"12"},{"size":2731,"mtime":1688485689183,"results":"20","hashOfConfig":"12"},{"size":319,"mtime":1689020644704,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"9mdj5f",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Projects\\PosterInfo\\tg-web-app\\src\\index.js",[],[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\App.js",["55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],[],"import { React, useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport * as yup from 'yup';\r\nimport { Formik, useFormik, Field } from 'formik';\r\nimport { getCountries, getCities } from './api/geoApi';\r\nimport { getCurrencies } from './api/currencyApi';\r\nimport FileUploaderMultiple from './Components/FileUploaderMultiple';\r\nimport { dataURLtoFile } from './utils/base64toFile';\r\nimport { Button, Textarea, Divider, Select, Input } from '@fluentui/react-components';\r\n\r\n\r\nimport {\r\n  getGenerationName,\r\n  getConfigurationName,\r\n  getModificationName,\r\n  safeGetData,\r\n  safeSetData,\r\n  getModels,\r\n  getGenerations,\r\n  getModifications,\r\n  getConfigurations,\r\n  getGenerationYears,\r\n  isObjectEmpty,\r\n  getOptionText\r\n} from './utils/addposter';\r\n\r\nimport {\r\n  validateMark,\r\n  validateModel,\r\n  validateGeneration,\r\n  validateConfiguration,\r\n  validateModification,\r\n  validateMileage,\r\n  validateCondition,\r\n  validateSellingType,\r\n  validateCountry,\r\n  validateCity,\r\n  validatePhone,\r\n  validateInfo,\r\n  validateYear,\r\n  validatePrice,\r\n  validateCurrencyId,\r\n} from './utils/validators';\r\nimport styles from './App.css';\r\n\r\nconst App = () => {\r\n  const [marks, setMarks] = useState([]);\r\n  const [conditions, setConditions] = useState([]);\r\n  const [sellingTypes, setSellingTypes] = useState([]);\r\n  const [countries, setCountries] = useState([]);\r\n  const [currencies, setCurrencies] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [tgApp, setTg] = useState(window.Telegram.WebApp);  // tg init\r\n\r\n\r\n  useEffect(() => {\r\n    console.info('Tg init');\r\n    if (tgApp) {\r\n      tgApp.expand();\r\n      console.info('bot screen expanded');\r\n    }\r\n  }, []);\r\n\r\n  // fill marks\r\n  useEffect(() => {\r\n    fetch('https://cars-base.ru/api/cars')\r\n      .then(response => response.json())\r\n      .then(data => safeSetData(data, setMarks, []))\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setConditions([\r\n      { name: 'Хорошее', id: 0 },\r\n      { name: 'На ходу', id: 1 },\r\n      { name: 'Битый', id: 2 },\r\n      { name: 'Не на ходу', id: 3 },\r\n      { name: 'Тотал', id: 4 }]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSellingTypes([\r\n      { name: 'Простая продажа', id: 0 },\r\n      { name: 'Лом', id: 1 },\r\n      { name: 'По запчастям', id: 2 }]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesInternal = async () => {\r\n      const cs = await getCountries();\r\n      setCountries(safeGetData(cs));\r\n    };\r\n    getCountriesInternal();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCurrenciesInternal = async () => {\r\n      const currencies = await getCurrencies();\r\n      setCurrencies(safeGetData(currencies));\r\n    };\r\n    getCurrenciesInternal();\r\n  }, []);\r\n\r\n  const submitPoster = async (values) => {\r\n    const { city,\r\n      condition,\r\n      configuration,\r\n      country,\r\n      generation,\r\n      info,\r\n      mark,\r\n      mileage,\r\n      model,\r\n      modification,\r\n      phone,\r\n      sellingType,\r\n      year,\r\n      price,\r\n      currencyId,\r\n      modelText,\r\n      generationText,\r\n      configurationText,\r\n      modificationText } = values;\r\n\r\n    // tgApp.initDataUnsafe\r\n    const mockinitDataUnsafe = {\r\n      query_id: \"AAH8WfcvAgAAAPxZ9y-cSGVW\",\r\n      user: {\r\n        id: 5099706876,\r\n        first_name: \"Michael\",\r\n        last_name: \"Newman\",\r\n        username: \"Michaelnman\",\r\n        language_code: \"ru\"\r\n      },\r\n      auth_date: \"1687722413\",\r\n      hash: \"7cdfb7a3b7235d77e2628ceb8abf32562a9a9bff33e941674de4dc68b82d29f7\"\r\n    };\r\n    const formData = new FormData();\r\n    formData.append('city', city);\r\n    formData.append('condition', condition);\r\n    formData.append('configuration', configuration);\r\n    formData.append('country', country);\r\n    formData.append('generation', generation);\r\n    formData.append('info', info);\r\n    formData.append('mark', mark);\r\n    formData.append('mileage', mileage.replace(/\\s/g, ''));\r\n    formData.append('model', model);\r\n    formData.append('modification', modification);\r\n    formData.append('phone', phone);\r\n    formData.append('sellingType', sellingType);\r\n    formData.append('year', year);\r\n    formData.append('price', price.replace(/\\s/g, ''));\r\n    formData.append('currencyId', currencyId);\r\n    formData.append('userId', mockinitDataUnsafe.user.id);\r\n    images.forEach((image) => {\r\n      formData.append('files', dataURLtoFile(image.url, image.id));\r\n    });\r\n    //await fetch('https://5fbb-94-19-146-12.ngrok-free.app/api/poster', {\r\n    await fetch('http://localhost:5007/api/poster', {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {\r\n        'ngrok-skip-browser-warning': true,\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n    });\r\n  };\r\n\r\n  const validationSchema = yup.object({\r\n    phone: yup.string().min(8, 'Укажите телефон в международном формате')\r\n      .required('Password is required'),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      models: [],\r\n      generations: [],\r\n      configurations: [],\r\n      modifications: [],\r\n      years: [],\r\n      cities: [],\r\n      condition: '',\r\n      sellingType: '',\r\n      year: '',\r\n      mark: {},\r\n      markText: '',\r\n      model: {},\r\n      modelText: '',\r\n      generation: {},\r\n      generationText: '',\r\n      configuration: {},\r\n      configurationText: '',\r\n      modification: '',\r\n      modificationText: '',\r\n      state: '',\r\n      mileage: '',\r\n      sellingMethod: '',\r\n      info: ' ',\r\n      country: '',\r\n      city: '',\r\n      price: '',\r\n      currencyId: 0,\r\n      phone: '',\r\n    },\r\n    validationSchema: validationSchema,\r\n  });\r\n  return (\r\n    <div className='App'>\r\n      <form onSubmit={e => { e.preventDefault(); }}>\r\n        <div className=\"panel\">\r\n          <p className='agreement bottompadded'>Lorem ipsum dolor sit amet, consectetur\r\n            adipiscing elit, sed do eiusmod tempor incididunt ut labore et\r\n            dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n            ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\r\n            in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit\r\n            anim id est laborum.</p>\r\n          <Divider align=\"left\" className='bottompadded'><b>Автомобиль</b></Divider>\r\n          <Select\r\n            id='mark'\r\n            name='mark'\r\n            value={formik.values.mark}\r\n            //filter\r\n            //showFilterClear\r\n            // showOnFocus\r\n            //validate={validateMark}\r\n            filterInputAutoFocus={false}\r\n            optionLabel=\"name\"\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              const models = await getModels(value);\r\n              formik.setFieldValue('mark', value);\r\n              formik.setFieldValue('markText', getOptionText(e.target));\r\n              formik.setFieldValue('models', models);\r\n\r\n              formik.setFieldValue('model', '');\r\n              formik.setFieldValue('generation', '');\r\n              formik.setFieldValue('configuration', '');\r\n              formik.setFieldValue('modification', '');\r\n              formik.setFieldValue('year', '');\r\n\r\n              formik.setFieldValue('generations', []);\r\n              formik.setFieldValue('configurations', []);\r\n              formik.setFieldValue('modifications', []);\r\n              formik.setFieldValue('years', []);\r\n            }}\r\n          >\r\n            <option value='' hidden>Выберите марку</option>\r\n            {marks.map((mark) => (<option key={'mark_' + mark.id} value={mark.id}>{mark.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.models.length === 0}\r\n            id='model'\r\n            name='model'\r\n            value={formik.values.model}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              const generations = await getGenerations(formik.values.mark, value);\r\n              formik.setFieldValue('model', value);\r\n              formik.setFieldValue('modelText', getOptionText(e.target));\r\n              formik.setFieldValue('generations', generations);\r\n\r\n              formik.setFieldValue('generation', '');\r\n              formik.setFieldValue('configuration', '');\r\n              formik.setFieldValue('modification', '');\r\n              formik.setFieldValue('year', '');\r\n\r\n              formik.setFieldValue('configurations', []);\r\n              formik.setFieldValue('modifications', []);\r\n              formik.setFieldValue('years', []);\r\n            }}\r\n          >\r\n            <option value='' hidden>Выберите модель</option>\r\n            {formik.values.models.map((model) => (<option key={'model_' + model.id} value={model.id}>{model.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.generations.length === 0}\r\n            id='generation'\r\n            name='generation'\r\n            value={formik.values.generation}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              const configurations = await getConfigurations(formik.values.mark, formik.values.model, value);\r\n              formik.setFieldValue('generation', value);\r\n              formik.setFieldValue('generationText', getOptionText(e.target));\r\n              formik.setFieldValue('configurations', configurations);\r\n\r\n              formik.setFieldValue('configuration', '');\r\n              formik.setFieldValue('modification', '');\r\n              formik.setFieldValue('year', '');\r\n\r\n              formik.setFieldValue('modifications', []);\r\n              formik.setFieldValue('years', []);\r\n            }}>\r\n            <option value='' hidden>Выберите поколение</option>\r\n            {formik.values.generations.map(generation => (<option key={'gen_' + generation.id} value={generation.id}>{getGenerationName(generation)}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.configurations.length === 0}\r\n            id='configuration'\r\n            name='configuration'\r\n            value={formik.values.configuration}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              const modifications = getModifications(formik.values.configurations, value);\r\n              formik.setFieldValue('configuration', value);\r\n              formik.setFieldValue('configurationText', getOptionText(e.target));\r\n              formik.setFieldValue('modifications', modifications);\r\n\r\n              formik.setFieldValue('modification', '');\r\n              formik.setFieldValue('year', '');\r\n\r\n              formik.setFieldValue('years', []);\r\n            }}>\r\n            <option value='' hidden>Выберите конфигурацию</option>\r\n            {formik.values.configurations.map(configuration => (<option key={'con_' + configuration.id} value={configuration.id}>{getConfigurationName(configuration)}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.modifications.length === 0}\r\n            id='modification'\r\n            name='modification'\r\n            value={formik.values.modification}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              const years = getGenerationYears(formik.values.generations, formik.values.generation);\r\n              formik.setFieldValue('modification', value);\r\n              formik.setFieldValue('modificationText', getOptionText(e.target));\r\n              formik.setFieldValue('years', years);\r\n\r\n              formik.setFieldValue('year', '');\r\n            }}>\r\n            <option value='' hidden>Выберите модификацию</option>\r\n            {formik.values.modifications.map(modification => (<option key={'mod_' + modification['complectation-id']} value={modification['complectation-id']}>{getModificationName(modification)}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.years.length === 0}\r\n            id='year'\r\n            name='year'\r\n            value={formik.values.year}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('year', value);\r\n            }}>\r\n            <option value='' hidden>Выберите год выпуска</option>\r\n            {formik.values.years.map(year => (<option key={'years_' + year} value={year}>{year}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Input\r\n            className='fullwidth'\r\n            disabled={formik.values.year === ''}\r\n            id='mileage'\r\n            name='mileage'\r\n            placeholder='Пробег'\r\n            contentAfter={'км.'}\r\n            value={formik.values.mileage}\r\n            onKeyDown={async (e, data) => {\r\n              const allowedChars = /^[0-9]+$/;\r\n              const inputValue = e.target.value;\r\n              const isNotBs = e.key !== 'Backspace';\r\n              if (!allowedChars.test(e.key) && isNotBs) {\r\n                e.preventDefault();\r\n              } else if (inputValue.length > 9 && isNotBs) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n            onChange={async (e, data) => {\r\n              const { value } = data;\r\n              const noBsValue = value.replace(/[^0-9]/g, '').slice(0, 8);\r\n              const dividedValue = noBsValue.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\r\n              formik.setFieldValue('mileage', dividedValue);\r\n            }}\r\n          />\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={conditions.length === 0 || formik.values.mileage === ''}\r\n            id='condition'\r\n            name='condition'\r\n            value={formik.values.condition}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('condition', value);\r\n            }}>\r\n            <option value='' hidden>Состояние</option>\r\n            {conditions.map(condition => (<option key={'condition_' + condition.id} value={condition.id}>{condition.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Divider align=\"left\" className='bottompadded'><b>Параметры предложения</b></Divider>\r\n          <Select\r\n            disabled={sellingTypes.length === 0 || formik.values.condition === ''}\r\n            id='sellingtype'\r\n            name='sellingtype'\r\n            value={formik.values.sellingType}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('sellingType', value);\r\n            }}>\r\n            <option value='' hidden>Тип продажи</option>\r\n            {sellingTypes.map(st => (<option key={'st_' + st.id} value={st.id}>{st.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Textarea\r\n            className='fullwidth'\r\n            disabled={formik.values.sellingType === ''}\r\n            id='info'\r\n            name='info'\r\n            rows={5} cols={30}\r\n            maxLength='256'\r\n            placeholder='Дополнительная информация'\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('info', value);\r\n            }}\r\n            value={formik.values.info}\r\n          />\r\n          <div className='bottompadded' />\r\n          <div className=\"inoneline\">\r\n            <Input\r\n              disabled={currencies.length === 0 || formik.values.sellingType === ''}\r\n              id='price'\r\n              name='price'\r\n              value={formik.values.price}\r\n              placeholder='Цена'\r\n              onKeyDown={async e => {\r\n                const allowedChars = /^[0-9]+$/;\r\n                const inputValue = e.target.value;\r\n                const isNotBs = e.key !== 'Backspace';\r\n                if (!allowedChars.test(e.key) && isNotBs) {\r\n                  e.preventDefault();\r\n                } else if (inputValue.length > 9 && isNotBs) {\r\n                  e.preventDefault();\r\n                }\r\n              }}\r\n              onChange={async (e, data) => {\r\n                const { value } = data;\r\n                const noBsValue = value.replace(/[^0-9]/g, '').slice(0, 8);\r\n                const dividedValue = noBsValue.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\r\n                formik.setFieldValue('price', dividedValue);\r\n              }}\r\n            />\r\n            <div className='bottompadded' />\r\n            <Select\r\n              disabled={currencies.length === 0 || formik.values.sellingType === ''}\r\n              id='currencyId'\r\n              name='currencyId'\r\n              as='select'\r\n              value={formik.values.currencyId}\r\n              onChange={async e => {\r\n                const { value } = e.target;\r\n                formik.setFieldValue('currencyId', value);\r\n              }}>\r\n              {currencies.map(curr => (<option key={'curr_' + curr.id} value={curr.id}>{curr.isoName}</option>))}\r\n            </Select>\r\n          </div>\r\n          <div className='bottompadded' />\r\n\r\n          <div className='bottompadded' />\r\n          <Divider align=\"left\" className='bottompadded'><b>Фотографии</b></Divider>\r\n          <FileUploaderMultiple images={images} setImages={setImages} />\r\n          <div className='bottompadded' />\r\n          <Divider align=\"left\" className='bottompadded'><b>Место продажи</b></Divider>\r\n          <Select\r\n            disabled={countries.length === 0 || formik.values.price === ''}\r\n            id='country'\r\n            name='country'\r\n            value={formik.values.country}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('country', value);\r\n              const cities = await getCities(value);\r\n              formik.setFieldValue('cities', cities);\r\n              formik.setFieldValue('city', '');\r\n            }}>\r\n            <option value='' hidden>Страна</option>\r\n            {countries.map(cntr => (<option key={'cntr_' + cntr.id} value={cntr.id}>{cntr.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Select\r\n            disabled={formik.values.cities.length === 0 || formik.values.country === ''}\r\n            id='city'\r\n            name='city'\r\n            value={formik.values.city}\r\n            onChange={async e => {\r\n              const { value } = e.target;\r\n              formik.setFieldValue('city', value);\r\n            }}>\r\n            <option value='' hidden>Город</option>\r\n            {formik.values.cities.map(city => (<option key={'city_' + city.id} value={city.id}>{city.name}</option>))}\r\n          </Select>\r\n          <div className='bottompadded' />\r\n          <Divider align=\"left\" className='bottompadded'><b>Контактная информация</b></Divider>\r\n          <Input\r\n            className='fullwidth'\r\n            disabled={formik.values.city === ''}\r\n            id='phone'\r\n            name='phone'\r\n            value={formik.values.phone}\r\n            placeholder='Телефон в международном формате'\r\n            onKeyDown={async e => {\r\n              const allowedChars = /^[0-9]+$/;\r\n              const inputValue = e.target.value;\r\n              const isNotBs = e.key !== 'Backspace';\r\n              if (!allowedChars.test(e.key) && isNotBs) {\r\n                e.preventDefault();\r\n              } else if (inputValue.length > 16 && isNotBs) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n            onChange={async (e, data) => {\r\n              const { value } = data;\r\n              const allowedValue = value.replace(/[^0-9]/g, '');\r\n              const noPlusValue = allowedValue.replace('+', '').slice(0, 14);\r\n              const plusedValue = '+' + noPlusValue;\r\n              formik.setFieldValue('phone', plusedValue);\r\n            }}\r\n          />\r\n          <div className='bottompadded' />\r\n          {/* <Button\r\n                  size=\"small\"\r\n                  type=\"button\"\r\n                  className=\"outline\"\r\n                  onClick={handleReset}\r\n                  disabled={!dirty || isSubmitting}\r\n                >\r\n                  Reset\r\n                </Button> */}\r\n          <Divider />\r\n          <div className='bottompadded' />\r\n          <div className=\"centerpanel\">\r\n            <Button\r\n              size=\"normal\"\r\n              severity=\"success\"\r\n              onClick={() => submitPoster(formik.values)}\r\n              type={'submit'} disabled={!(formik.isValid && formik.dirty && images.length > 0 && !formik.isSubmitting)}>\r\n              Добавить объявление\r\n            </Button></div>\r\n          {/* {'isValid dirty  images.length  isSubmitting'}\r\n          <br/>\r\n          {formik.isValid + ' ' + formik.dirty + ' ' + images.length + ' ' + formik.isSubmitting} */}\r\n        </div>\r\n      </form>\r\n    </div>)\r\n}\r\nexport default App;","C:\\Projects\\PosterInfo\\tg-web-app\\src\\reportWebVitals.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\geoApi.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\currencyApi.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\Components\\FileUploaderMultiple.js",["81"],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\base64toFile.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\addposter.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\validators.js",["82","83","84"],[],"import { formatPhoneNumber, formatPhoneNumberIntl, isValidPhoneNumber, isPossiblePhoneNumber } from 'react-phone-number-input';\r\n\r\nexport const validatePhone = (value) => {\r\n    let error = '';\r\n    if (!value.startsWith('+')) {\r\n        error = 'Укажите телефон в международном формате';\r\n    }\r\n    else if (!isPossiblePhoneNumber(value)) {\r\n        error = 'Указан неверный номер телефона';\r\n    }\r\n    return error;\r\n}\r\nexport const validateMark = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateModel = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateGeneration = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateConfiguration = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateModification = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateMileage = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validatePrice = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateCondition = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateSellingType = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateCountry = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateCurrencyId = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateCity = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateInfo = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}\r\nexport const validateYear = (value) => {\r\n    let error = '';\r\n    if (value === '') { error = 'Заполните все поля' }\r\n    return error;\r\n}","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\getRandomId.js",[],[],{"ruleId":"85","severity":1,"message":"86","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":16},{"ruleId":"85","severity":1,"message":"90","line":4,"column":29,"nodeType":"87","messageId":"88","endLine":4,"endColumn":34},{"ruleId":"85","severity":1,"message":"91","line":23,"column":3,"nodeType":"87","messageId":"88","endLine":23,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":28,"column":3,"nodeType":"87","messageId":"88","endLine":28,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":29,"column":3,"nodeType":"87","messageId":"88","endLine":29,"endColumn":16},{"ruleId":"85","severity":1,"message":"94","line":30,"column":3,"nodeType":"87","messageId":"88","endLine":30,"endColumn":21},{"ruleId":"85","severity":1,"message":"95","line":31,"column":3,"nodeType":"87","messageId":"88","endLine":31,"endColumn":24},{"ruleId":"85","severity":1,"message":"96","line":32,"column":3,"nodeType":"87","messageId":"88","endLine":32,"endColumn":23},{"ruleId":"85","severity":1,"message":"97","line":33,"column":3,"nodeType":"87","messageId":"88","endLine":33,"endColumn":18},{"ruleId":"85","severity":1,"message":"98","line":34,"column":3,"nodeType":"87","messageId":"88","endLine":34,"endColumn":20},{"ruleId":"85","severity":1,"message":"99","line":35,"column":3,"nodeType":"87","messageId":"88","endLine":35,"endColumn":22},{"ruleId":"85","severity":1,"message":"100","line":36,"column":3,"nodeType":"87","messageId":"88","endLine":36,"endColumn":18},{"ruleId":"85","severity":1,"message":"101","line":37,"column":3,"nodeType":"87","messageId":"88","endLine":37,"endColumn":15},{"ruleId":"85","severity":1,"message":"102","line":38,"column":3,"nodeType":"87","messageId":"88","endLine":38,"endColumn":16},{"ruleId":"85","severity":1,"message":"103","line":39,"column":3,"nodeType":"87","messageId":"88","endLine":39,"endColumn":15},{"ruleId":"85","severity":1,"message":"104","line":40,"column":3,"nodeType":"87","messageId":"88","endLine":40,"endColumn":15},{"ruleId":"85","severity":1,"message":"105","line":41,"column":3,"nodeType":"87","messageId":"88","endLine":41,"endColumn":16},{"ruleId":"85","severity":1,"message":"106","line":42,"column":3,"nodeType":"87","messageId":"88","endLine":42,"endColumn":21},{"ruleId":"85","severity":1,"message":"107","line":44,"column":8,"nodeType":"87","messageId":"88","endLine":44,"endColumn":14},{"ruleId":"85","severity":1,"message":"108","line":53,"column":17,"nodeType":"87","messageId":"88","endLine":53,"endColumn":22},{"ruleId":"109","severity":1,"message":"110","line":62,"column":6,"nodeType":"111","endLine":62,"endColumn":8,"suggestions":"112"},{"ruleId":"85","severity":1,"message":"113","line":120,"column":7,"nodeType":"87","messageId":"88","endLine":120,"endColumn":16},{"ruleId":"85","severity":1,"message":"114","line":121,"column":7,"nodeType":"87","messageId":"88","endLine":121,"endColumn":21},{"ruleId":"85","severity":1,"message":"115","line":122,"column":7,"nodeType":"87","messageId":"88","endLine":122,"endColumn":24},{"ruleId":"85","severity":1,"message":"116","line":123,"column":7,"nodeType":"87","messageId":"88","endLine":123,"endColumn":23},{"ruleId":"85","severity":1,"message":"117","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"118","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":27},{"ruleId":"85","severity":1,"message":"119","line":1,"column":29,"nodeType":"87","messageId":"88","endLine":1,"endColumn":50},{"ruleId":"85","severity":1,"message":"120","line":1,"column":52,"nodeType":"87","messageId":"88","endLine":1,"endColumn":70},"no-unused-vars","'classnames' is defined but never used.","Identifier","unusedVar","'Formik' is defined but never used.","'Field' is defined but never used.","'isObjectEmpty' is defined but never used.","'validateMark' is defined but never used.","'validateModel' is defined but never used.","'validateGeneration' is defined but never used.","'validateConfiguration' is defined but never used.","'validateModification' is defined but never used.","'validateMileage' is defined but never used.","'validateCondition' is defined but never used.","'validateSellingType' is defined but never used.","'validateCountry' is defined but never used.","'validateCity' is defined but never used.","'validatePhone' is defined but never used.","'validateInfo' is defined but never used.","'validateYear' is defined but never used.","'validatePrice' is defined but never used.","'validateCurrencyId' is defined but never used.","'styles' is defined but never used.","'setTg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tgApp'. Either include it or remove the dependency array.","ArrayExpression",["121"],"'modelText' is assigned a value but never used.","'generationText' is assigned a value but never used.","'configurationText' is assigned a value but never used.","'modificationText' is assigned a value but never used.","'useState' is defined but never used.","'formatPhoneNumber' is defined but never used.","'formatPhoneNumberIntl' is defined but never used.","'isValidPhoneNumber' is defined but never used.",{"desc":"122","fix":"123"},"Update the dependencies array to be: [tgApp]",{"range":"124","text":"125"},[1704,1706],"[tgApp]"]