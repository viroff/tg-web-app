[{"C:\\Projects\\PosterInfo\\tg-web-app\\src\\index.js":"1","C:\\Projects\\PosterInfo\\tg-web-app\\src\\App.js":"2","C:\\Projects\\PosterInfo\\tg-web-app\\src\\reportWebVitals.js":"3","C:\\Projects\\PosterInfo\\tg-web-app\\src\\API\\geoApi.js":"4","C:\\Projects\\PosterInfo\\tg-web-app\\src\\Components\\FileUploader.js":"5","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\addposter.js":"6","C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\geoApi.js":"7","C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\validators.js":"8"},{"size":352,"mtime":1672081038816,"results":"9","hashOfConfig":"10"},{"size":16893,"mtime":1686425651235,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1670009453507,"results":"12","hashOfConfig":"10"},{"size":1132,"mtime":1685478714555,"results":"13","hashOfConfig":"10"},{"size":2219,"mtime":1686411737893,"results":"14","hashOfConfig":"10"},{"size":4465,"mtime":1686425396797,"results":"15","hashOfConfig":"10"},{"size":1132,"mtime":1685478714555,"results":"16","hashOfConfig":"10"},{"size":2410,"mtime":1686425607007,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"15wtzlf",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Projects\\PosterInfo\\tg-web-app\\src\\index.js",[],[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\App.js",["44","45","46","47","48","49","50"],[],"import { React, useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { getCountries, getCities } from './api/geoApi';\r\nimport FileUploader from './Components/FileUploader';\r\n\r\nimport {\r\n  getOptionText,\r\n  getGenerationName,\r\n  getConfigurationName,\r\n  getModificationName,\r\n  safeGetData,\r\n  safeSetData,\r\n  getModels,\r\n  getGenerations,\r\n  getModifications,\r\n  getConfigurations,\r\n  getGenerationYears,\r\n} from './utils/addposter';\r\n\r\nimport {\r\n  validateMark,\r\n  validateModel,\r\n  validateGeneration,\r\n  validateConfiguration,\r\n  validateModification,\r\n  validateMileage,\r\n  validateCondition,\r\n  validateSellingType,\r\n  validateCountry,\r\n  validateCity,\r\n  validatePhone,\r\n  validateInfo,\r\n  validateYear,\r\n} from './utils/validators';\r\nimport styles from './App.css';\r\n\r\nconst tg = window.Telegram.WebApp;\r\n\r\nconst App = () => {\r\n  const [marks, setMarks] = useState([]);\r\n  const [conditions, setConditions] = useState([]);\r\n  const [sellingTypes, setSellingTypes] = useState([]);\r\n  const [countries, setCountries] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n\r\n\r\n\r\n  // fill marks\r\n  useEffect(() => {\r\n    fetch('https://cars-base.ru/api/cars')\r\n      .then(response => response.json())\r\n      .then(data => safeSetData(data, setMarks, []))\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setConditions([\r\n      { name: 'Хорошее', id: 0 },\r\n      { name: 'На ходу', id: 1 },\r\n      { name: 'Битый', id: 2 },\r\n      { name: 'Не на ходу', id: 3 },\r\n      { name: 'Тотал', id: 4 }]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSellingTypes([\r\n      { name: 'Простая продажа', id: 0 },\r\n      { name: 'Лом', id: 1 },\r\n      { name: 'По запчастям', id: 2 }]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesInternal = async () => {\r\n      const cs = await getCountries();\r\n      setCountries(safeGetData(cs));\r\n    };\r\n    getCountriesInternal();\r\n  }, []);\r\n\r\n  const onSubmit = async () => {\r\n    const formData = new FormData();\r\n    images.forEach((image) => {\r\n      formData.append('files', image.file);\r\n    });\r\n\r\n    await fetch('http://localhost:5007/api/poster', {\r\n      method: 'POST',\r\n      body: formData,\r\n      mode: 'cors', // Указываем режим CORS\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n    });\r\n  };\r\n  return (\r\n\r\n    <div className='App'>\r\n      <Formik\r\n        initialValues={{\r\n          models: [],\r\n          generations: [],\r\n          configurations: [],\r\n          modifications: [],\r\n          years: [],\r\n          cities: [],\r\n          condition: '',\r\n          sellingType: '',\r\n          year: '',\r\n          mark: '',\r\n          markText: '',\r\n          model: '',\r\n          modelText: '',\r\n          generation: '',\r\n          generationText: '',\r\n          configuration: '',\r\n          configurationText: '',\r\n          modification: '',\r\n          modificationText: '',\r\n          state: '',\r\n          mileage: '',\r\n          sellingMethod: '',\r\n          info: '',\r\n          country: '',\r\n          city: '',\r\n          phone: '+',\r\n        }}\r\n        onSubmit={values => {\r\n          const posterData = { values, images: images };\r\n          console.log('submit', posterData);\r\n        }}\r\n      >\r\n        {props => {\r\n          const {\r\n            values,\r\n            dirty,\r\n            isSubmitting,\r\n            isValid,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            handleReset,\r\n            setFieldValue,\r\n            setErrors,\r\n            setFieldTouched\r\n          } = props;\r\n          return (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Field\r\n                id='mark'\r\n                name='mark'\r\n                as='select'\r\n                value={values.mark}\r\n                validate={validateMark}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  const models = await getModels(value);\r\n                  setFieldValue('mark', value);\r\n                  setFieldValue('markText', getOptionText(e.target));\r\n                  setFieldValue('models', models);\r\n\r\n                  setFieldValue('model', '');\r\n                  setFieldValue('generation', '');\r\n                  setFieldValue('configuration', '');\r\n                  setFieldValue('modification', '');\r\n                  setFieldValue('year', '');\r\n\r\n                  setFieldValue('generations', []);\r\n                  setFieldValue('configurations', []);\r\n                  setFieldValue('modifications', []);\r\n                  setFieldValue('years', []);\r\n                }}\r\n              >\r\n                <option value=''>Выберите марку</option>\r\n                {marks.map(option => (\r\n                  <option key={option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='model'\r\n                name='model'\r\n                as='select'\r\n                value={values.model}\r\n                validate={validateModel}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  const generations = await getGenerations(values.mark, value);\r\n                  setFieldValue('model', value);\r\n                  setFieldValue('modelText', getOptionText(e.target));\r\n                  setFieldValue('generations', generations);\r\n\r\n                  setFieldValue('generation', '');\r\n                  setFieldValue('configuration', '');\r\n                  setFieldValue('modification', '');\r\n                  setFieldValue('year', '');\r\n\r\n                  setFieldValue('configurations', []);\r\n                  setFieldValue('modifications', []);\r\n                  setFieldValue('years', []);\r\n                }}\r\n              >\r\n                <option value=''>Выберите модель</option>\r\n                {values.models.map(option => (\r\n                  <option key={option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='generation'\r\n                name='generation'\r\n                as='select'\r\n                value={values.generation}\r\n                validate={validateGeneration}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  const configurations = await getConfigurations(values.mark, values.model, value);\r\n                  setFieldValue('generation', value);\r\n                  setFieldValue('generationText', getOptionText(e.target));\r\n                  setFieldValue('configurations', configurations);\r\n\r\n                  setFieldValue('configuration', '');\r\n                  setFieldValue('modification', '');\r\n                  setFieldValue('year', '');\r\n\r\n                  setFieldValue('modifications', []);\r\n                  setFieldValue('years', []);\r\n                }}\r\n              >\r\n                <option value=''>Выберите поколение</option>\r\n                {values.generations.map(option => (\r\n                  <option key={`gen_${option.id}`} value={option.id}>{getGenerationName(option)}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='configuration'\r\n                name='configuration'\r\n                as='select'\r\n                value={values.configuration}\r\n                validate={validateConfiguration}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  const modifications = getModifications(values.configurations, value);\r\n                  setFieldValue('configuration', value);\r\n                  setFieldValue('configurationText', getOptionText(e.target));\r\n                  setFieldValue('modifications', modifications);\r\n\r\n                  setFieldValue('modification', '');\r\n                  setFieldValue('year', '');\r\n\r\n                  setFieldValue('years', []);\r\n                }}\r\n              >\r\n                <option value=''>Выберите конфигурацию</option>\r\n                {values.configurations.map(option => (\r\n                  <option key={`conf_${option.id}`} value={option.id}>{getConfigurationName(option)}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='modification'\r\n                name='modification'\r\n                as='select'\r\n                value={values.modification}\r\n                validate={validateModification}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  const years = getGenerationYears(values.generations, values.generation);\r\n                  setFieldValue('modification', value);\r\n                  setFieldValue('modificationText', getOptionText(e.target));\r\n                  setFieldValue('years', years);\r\n\r\n                  setFieldValue('year', '');\r\n                }}\r\n              >\r\n                <option value=''>Выберите модификацию</option>\r\n                {values.modifications.map(option => (\r\n                  <option key={option['complectation-id']} value={option['complectation-id']}>{getModificationName(option)}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='year'\r\n                name='year'\r\n                as='select'\r\n                value={values.year}\r\n                validate={validateYear}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('year', value);\r\n                }}\r\n              >\r\n                <option value=''>Выберите год выпуска</option>\r\n                {values.years.map(option => (\r\n                  <option key={option} value={option}>{option}</option>\r\n                ))}\r\n              </Field>\r\n              <p>-------------</p>\r\n              <Field\r\n                id='mileage'\r\n                name='mileage'\r\n                as='input'\r\n                placeholder='Пробег'\r\n                validate={validateMileage}\r\n                onKeyDown={async e => {\r\n                  const allowedChars = /^[0-9]+$/;\r\n                  const inputValue = e.target.value;\r\n                  const isNotBs = e.key !== 'Backspace';\r\n                  if (!allowedChars.test(e.key) && isNotBs) {\r\n                    e.preventDefault();\r\n                  } else if (inputValue.length > 6 && isNotBs) {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('mileage', value);\r\n                }}\r\n              />\r\n              {errors.mileage && touched.mileage && <div className={styles.error}>{errors.mileage}</div>}\r\n              <br />\r\n              <Field\r\n                id='condition'\r\n                name='condition'\r\n                as='select'\r\n                value={values.condition}\r\n                validate={validateCondition}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('condition', value);\r\n                }}\r\n              >\r\n                <option value=''>Укажите состояние</option>\r\n                {conditions.map(option => (\r\n                  <option key={'c_' + option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='sellingtype'\r\n                name='sellingtype'\r\n                as='select'\r\n                value={values.sellingType}\r\n                validate={validateSellingType}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('sellingType', value);\r\n                }}\r\n              >\r\n                <option value=''>Укажите тип продажи</option>\r\n                {sellingTypes.map(option => (\r\n                  <option key={'st_' + option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <p>---------------------------------------</p>\r\n              <br />\r\n              <Field\r\n                id='country'\r\n                name='country'\r\n                as='select'\r\n                value={values.country}\r\n                validate={validateCountry}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('country', value);\r\n                  const cities = await getCities(value);\r\n                  setFieldValue('cities', cities);\r\n                  setFieldValue('city', '');\r\n                }}\r\n              >\r\n                <option value=''>Страна продажи</option>\r\n                {countries.map(option => (\r\n                  <option key={'ctr_' + option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <br />\r\n              <Field\r\n                id='city'\r\n                name='city'\r\n                as='select'\r\n                value={values.city}\r\n                validate={validateCity}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('city', value);\r\n                }}\r\n              >\r\n                <option value=''>Город продажи</option>\r\n                {values.cities.map(option => (\r\n                  <option key={'cty_' + option.id} value={option.id}>{option.name}</option>\r\n                ))}\r\n              </Field>\r\n              <p>---------------------------------------</p>\r\n              <Field\r\n                id='phone'\r\n                name='phone'\r\n                as='input'\r\n                placeholder='Телефон'\r\n                validate={validatePhone}\r\n                onKeyDown={async e => {\r\n                  const onlyDigitsAndPlus = /^[0-9+]*$/;\r\n                  const { key, target } = e;\r\n                  if ((target.selectionStart === 1 || target.selectionStart === 0) && key === 'Backspace') {\r\n                    e.preventDefault();\r\n                  }\r\n                  if (!(onlyDigitsAndPlus.test(key) || key === 'Backspace')) {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  if (!value.startsWith('+')) {\r\n                    setFieldValue('phone', '');\r\n                  }\r\n                  else {\r\n                    setFieldValue('phone', value);\r\n                  }\r\n                }}\r\n              />\r\n              {errors.phone && touched.phone && <div className={styles.error}>{errors.phone}</div>}\r\n              <br />\r\n              <Field\r\n                id='info'\r\n                name='info'\r\n                as='textarea'\r\n                rows='5' cols='35'\r\n                maxLength='256'\r\n                placeholder='Дополнительная информация'\r\n                validate={validateInfo}\r\n                onChange={async e => {\r\n                  const { value } = e.target;\r\n                  setFieldValue('info', value);\r\n                }}\r\n              />\r\n              <FileUploader images={images} setImages={setImages} />\r\n\r\n\r\n\r\n\r\n              <button\r\n                type=\"button\"\r\n                className=\"outline\"\r\n                onClick={handleReset}\r\n                disabled={!dirty || isSubmitting}\r\n              >\r\n                Reset\r\n              </button>\r\n              <button type=\"submit\" disabled={!(isValid && dirty)}>\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          );\r\n        }}\r\n\r\n      </Formik>\r\n    </div>)\r\n}\r\nexport default App;\r\n\r\n\r\n/*\r\n<br />\r\n<label className={classnames(styles.label, { [styles.errorLabel]: errors.Year && touched.Year })}>\r\n  Год выпуска\r\n</label>\r\n<Field as='select' className={classnames(styles.field, { [styles.errorInput]: errors.Year && touched.Year })}\r\n  name='Year'\r\n  validate={validateYear}>\r\n  <option selected value='-1'>Выберите год выпуска</option>\r\n  <option value='2023'>2023</option>\r\n  <option value='2022'>2022</option>\r\n  <option value='2021'>2021</option>\r\n</Field>\r\n{errors.Year && touched.Year && <div className={styles.error}>{errors.Year}</div>}\r\n<br />\r\n*/","C:\\Projects\\PosterInfo\\tg-web-app\\src\\reportWebVitals.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\API\\geoApi.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\Components\\FileUploader.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\addposter.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\api\\geoApi.js",[],[],"C:\\Projects\\PosterInfo\\tg-web-app\\src\\utils\\validators.js",["51","52","53"],[],{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":18},{"ruleId":"54","severity":1,"message":"58","line":38,"column":7,"nodeType":"56","messageId":"57","endLine":38,"endColumn":9},{"ruleId":"54","severity":1,"message":"59","line":81,"column":9,"nodeType":"56","messageId":"57","endLine":81,"endColumn":17},{"ruleId":"54","severity":1,"message":"60","line":141,"column":13,"nodeType":"56","messageId":"57","endLine":141,"endColumn":25},{"ruleId":"54","severity":1,"message":"61","line":142,"column":13,"nodeType":"56","messageId":"57","endLine":142,"endColumn":23},{"ruleId":"54","severity":1,"message":"62","line":146,"column":13,"nodeType":"56","messageId":"57","endLine":146,"endColumn":22},{"ruleId":"54","severity":1,"message":"63","line":147,"column":13,"nodeType":"56","messageId":"57","endLine":147,"endColumn":28},{"ruleId":"54","severity":1,"message":"64","line":1,"column":10,"nodeType":"56","messageId":"57","endLine":1,"endColumn":27},{"ruleId":"54","severity":1,"message":"65","line":1,"column":29,"nodeType":"56","messageId":"57","endLine":1,"endColumn":50},{"ruleId":"54","severity":1,"message":"66","line":1,"column":52,"nodeType":"56","messageId":"57","endLine":1,"endColumn":70},"no-unused-vars","'classnames' is defined but never used.","Identifier","unusedVar","'tg' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleBlur' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'setFieldTouched' is assigned a value but never used.","'formatPhoneNumber' is defined but never used.","'formatPhoneNumberIntl' is defined but never used.","'isValidPhoneNumber' is defined but never used."]